ext {
  componentName = 'Interlok AWS/SQS'
  componentDesc = "Publishing & Consuming from AWS SQS natively or via their JMS provider"
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
  awsSDKVersion = '1.12.770'
  jacksonVersion = '2.17.2'
}

dependencies {
  api ("com.amazonaws:aws-java-sdk-sqs:$awsSDKVersion")
  api ("com.amazonaws:aws-java-sdk-core:$awsSDKVersion") {
    exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
    exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
    exclude group: "com.fasterxml.jackson.dataformat", module: "jackson-dataformat-cbor"
  }
  api ("com.amazonaws:amazon-sqs-java-messaging-lib:1.1.0")
  // Dependency to platform/BOM
  api (platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion"))
  api ("com.fasterxml.jackson.core:jackson-databind")
  api ("com.fasterxml.jackson.core:jackson-core")
  api ("com.fasterxml.jackson.core:jackson-annotations")
  // It will probably march in lockstep, but since it's a different
  // group I will make it separate.
  api ("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor")
  api ("org.apache.httpcomponents:httpclient:4.5.14")
  api ("commons-codec:commons-codec:1.17.1")
  api project(':interlok-aws-common')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
    classifier = 'examples'
    from new File(buildDir, '/examples')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.extensions.delombokTask
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
              "Build-Jdk": System.getProperty('java.version'),
              "Implementation-Title": componentName,
              "Implementation-Version": project.version,
              "Implementation-Vendor-Id": project.group,
              "Implementation-Vendor": organizationName)
  }
}
artifacts {
    archives javadocJar
    archives examplesJar
    archives sourcesJar
}

publishing {
  publications {
      mavenJava(MavenPublication) {
          from components.java

          artifact javadocJar { classifier "javadoc" }
          artifact examplesJar { classifier "examples" }
          artifact sourcesJar { classifier "sources" }
          pom.withXml {
            asNode().appendNode("name", componentName)
			asNode().appendNode("description", componentDesc)
			asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
            def properties = asNode().appendNode("properties")
            properties.appendNode("target", "3.3.0+")
            properties.appendNode("tags", "aws,sqs")
            properties.appendNode("license", "false")
            properties.appendNode("readme", "https://github.com/adaptris/interlok-aws/raw/develop/README.md")
            properties.appendNode("repository", "https://github.com/adaptris/interlok-aws")
          }
      }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}


delombok {
  target = delombokTargetDir
}

task deleteGeneratedFiles(type: Delete) {
  delete file(testResourcesDir() + "/unit-tests.properties"), file(testResourcesDir() + "/unit-tests.properties.resolved"), delombokTargetDir
}

clean.dependsOn deleteGeneratedFiles
processTestResources.dependsOn copyUnitTestProperties
