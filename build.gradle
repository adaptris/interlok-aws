import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.*

plugins {
  id 'com.github.spotbugs' version '4.0.5' apply false
  id "io.freefair.lombok" version "5.0.0" apply false
}

ext {
  interlokCoreVersion = project.hasProperty('interlokCoreVersion') ? project.getProperty('interlokCoreVersion') : '3.10-SNAPSHOT'
  releaseVersion = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : '3.10-SNAPSHOT'
  nexusBaseUrl = project.hasProperty('nexusBaseUrl') ? project.getProperty('nexusBaseUrl') : 'https://nexus.adaptris.net/nexus'
  mavenPublishUrl = project.hasProperty('mavenPublishUrl') ? project.getProperty('mavenPublishUrl') : nexusBaseUrl + '/content/repositories/snapshots'
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  repoUsername = project.hasProperty('repoUsername') ? project.getProperty('repoUsername') : 'unknown'
  repoPassword = project.hasProperty('repoPassword') ? project.getProperty('repoPassword') : 'unknown'
  defaultNexusRepo = project.hasProperty('defaultNexusRepo') ? project.getProperty('defaultNexusRepo') : 'https://repo1.maven.org/maven2/'
  offlineJavadocPackageDir = new File(project.buildDir, "offline-javadoc-packages")

  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-core/" + interlokCoreVersion
  interlokCommonJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-common/" + interlokCoreVersion
  organizationName = "Adaptris Ltd"

  slf4jVersion = '1.7.30'
  awsSDKVersion = '1.11.772'
  log4j2Version = '2.13.2'
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

ext.hostname = { ->
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    return System.getenv("COMPUTERNAME")
  }
  return System.getenv("HOSTNAME")
}

ext.hasGraphViz = { ->
  def app = "dot"
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    app = app + ".exe"
  }
  return System.getenv("PATH").split(File.pathSeparator).any{
    java.nio.file.Paths.get("${it}").resolve(app).toFile().exists()
  }
}
ext.gitBranchNameOrTimestamp = { branchName ->
  if (branchName.equals("HEAD") || branchName.equals("develop") || branchName.startsWith("release")) {
    return new Date().format('HH:mm:ss z');
  }
  return branchName;
}

ext.buildInfo = { ->
   new ByteArrayOutputStream().withStream { os ->
      exec {
        executable = "git"
        args = ["rev-parse", "--abbrev-ref", "HEAD"]
        standardOutput = os
      }
      def branchName = os.toString().replaceAll("\r", "").replaceAll("\n", "").trim();
      return gitBranchNameOrTimestamp(branchName);
    }
}

def propertyTemplate(dir, filename) {
  def file = new File(dir, filename + "." + hostname())
  if (file.exists()) {
    return file.getName()
  }
  return filename
}


task clean(type: Delete) {
  delete project.buildDir
}

subprojects {
  // Apply the java plugin to add support for Java
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'maven-publish'
  apply plugin: "jacoco"
  apply plugin: "io.freefair.lombok"
  apply plugin: 'com.github.spotbugs'

  sourceCompatibility = 1.8
  group   = 'com.adaptris'
  version = releaseVersion
  def versionDir = "$buildDir/version"
  generateLombokConfig.enabled = false

  // In this section you declare where to find the dependencies of your project
  repositories {
    mavenCentral()
    maven { url "$defaultNexusRepo" }
    maven { url "$nexusBaseUrl/content/groups/public" }
    maven { url "$nexusBaseUrl/content/groups/interlok" }
  }

  configurations {
    javadoc {}
    umlDoclet {}
    offlineJavadocPackages {}
    all*.exclude group: 'c3p0'
    all*.exclude group: 'commons-logging'
    all*.exclude group: 'javamail'
    all*.exclude group: 'javax.mail', module: 'mail'
    all*.exclude group: 'org.glassfish.hk2.external'
    all*.exclude group: 'xalan', module: 'xalan'
    all*.exclude group: 'net.sf.saxon', module: 'saxon'
    all*.exclude group: 'org.codehaus.woodstox'
    all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
    // INTERLOK-3197 exclude old javax.mail
    all*.exclude group: 'com.sun.mail', module: 'javax.mail'
    all*.exclude group: 'javax.validation', module: 'validation-api'
    all*.exclude group: 'javax.activation', module: 'activation'
    all*.exclude group: 'javax.activation', module: 'javax.activation-api'
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }

  // In this section you declare the dependencies for your production and test code
  dependencies {
      compile ("com.adaptris:interlok-core:$interlokCoreVersion") { changing= true}
      compile ("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}
      compile ("org.slf4j:slf4j-api:$slf4jVersion")
      compile ("org.slf4j:jcl-over-slf4j:$slf4jVersion")

      annotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}
      testCompile ('junit:junit:4.13')
      testCompile ("com.adaptris:interlok-stubs:$interlokCoreVersion") { changing= true}
      testCompile ("org.slf4j:jcl-over-slf4j:$slf4jVersion")
      testCompile ("org.apache.logging.log4j:log4j-core:${log4j2Version}")
      testCompile ("org.apache.logging.log4j:log4j-1.2-api:${log4j2Version}")
      testCompile ("org.apache.logging.log4j:log4j-api:${log4j2Version}")
      javadoc("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}
      umlDoclet("nl.talsmasoftware:umldoclet:1.1.4")

      offlineJavadocPackages ("com.adaptris:interlok-core:$interlokCoreVersion:javadoc@jar") { changing= true}
      offlineJavadocPackages ("com.adaptris:interlok-common:$interlokCoreVersion:javadoc@jar") { changing= true}

  }

  javadoc {
    onlyIf {
      !hasGraphViz()
    }
    configure(options) {
      options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
      options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
      taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
      options.addStringOption "tagletpath", configurations.javadoc.asPath
    }
  }

  task umlJavadoc(type: Javadoc) {
    group 'Documentation'
    description 'Build javadocs using plantuml + graphviz + umldoclet, if dot is available'

    onlyIf {
      hasGraphViz()
    }
    // Since we are using lombok, we have to switch the source.
    // c.f. https://github.com/freefair/gradle-plugins/issues/132
    // source = sourceSets.main.allJava
    source = sourceSets.main.extensions.delombokTask
    classpath = project.sourceSets.main.compileClasspath
    configure(options) {
      options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
      options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
      taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
      options.addStringOption "tagletpath", configurations.javadoc.asPath
      options.docletpath = configurations.umlDoclet.files.asType(List)
      options.doclet = "nl.talsmasoftware.umldoclet.UMLDoclet"
      options.addStringOption "umlBasePath", destinationDir.getCanonicalPath()
      options.addStringOption "umlImageFormat", "SVG"
      options.addStringOption "umlExcludedReferences", "java.lang.Exception,java.lang.Object,java.lang.Enum"
      options.addStringOption "umlIncludePrivateClasses","false"
      options.addStringOption "umlIncludePackagePrivateClasses","false"
      options.addStringOption "umlIncludeProtectedClasses","false"
      options.addStringOption "umlIncludeAbstractSuperclassMethods","false"
      options.addStringOption "umlIncludeConstructors","false"
      options.addStringOption "umlIncludePublicFields","false"
      options.addStringOption "umlIncludePackagePrivateFields","false"
      options.addStringOption "umlIncludeProtectedFields", "false"
      options.addStringOption "umlIncludeDeprecatedClasses", "false"
      options.addStringOption "umlIncludePrivateInnerClasses", "false"
      options.addStringOption "umlIncludePackagePrivateInnerClasses", "false"
      options.addStringOption "umlIncludeProtectedInnerClasses","false"
    }
  }

  jacocoTestReport {
      reports {
          xml.enabled true
          html.enabled true
      }
  }


  sourceSets {
    main {
      output.dir(versionDir, builtBy: 'generateVersion')
    }
  }

  // Generate the META-INF/adaptris-version file
  task generateVersion {
    doLast {
      def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
      versionFile.getParentFile().mkdirs()
      ant.propertyfile(file: versionFile) {
        entry(key: 'component.name', value: componentName)
        entry(key: 'build.version', value: releaseVersion)
        entry(key: 'groupId', value: "com.adaptris")
        entry(key: 'artifactId', value: project.name)
        entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
        entry(key: 'build.info', value: buildInfo())
      }
    }
  }

  task offlinePackageList(type: Copy) {
    description 'Build an offline package-list for javadocs'
    group 'Documentation'

    project.configurations.offlineJavadocPackages.collect { dependency ->
      from(zipTree(dependency)) {
        into dependency.name
      }
    }
    include "package-list"
    into offlineJavadocPackageDir
  }


  ext.testResourcesDir = { ->
    return "${project.projectDir}/src/test/resources".replaceAll("\\\\", "/")
  }

  task generateUnitTestProperties {
    doLast {
      ant.property(file: project.projectDir.getCanonicalPath() + "/" + "build.properties")
      ant.property(file:  testResourcesDir() + "/" + propertyTemplate(testResourcesDir(), "unit-tests.properties.template"))
      ant.echoproperties(destfile:  testResourcesDir() + '/unit-tests.properties.resolved', prefix: "junit.")
      ant.replace(file:  testResourcesDir() + '/unit-tests.properties.resolved', token:"junit.", value: "")
    }
  }

  task copyUnitTestProperties(type: Copy, dependsOn: generateUnitTestProperties) {
    delete file( testResourcesDir() + '/unit-tests.properties')
    from file( testResourcesDir() + "/unit-tests.properties.resolved")
    into (testResourcesDir())
    rename { String fileName ->
      fileName.replace("unit-tests.properties.resolved", 'unit-tests.properties')
    }
    filter(ReplaceTokens, tokens: [JAVA_HOME: System.getProperty("java.home").replaceAll("\\\\", "/")])
    filter(ReplaceTokens, tokens: [BASE_DIR: project.projectDir.getCanonicalPath().replaceAll("\\\\", "/")])
    filter(ReplaceTokens, tokens: [BUILD_DIR: project.buildDir.getCanonicalPath().replaceAll("\\\\", "/")])
  }

  spotbugsMain {
    effort = "max"
    reportLevel = "high"
    // showProgress = "true"
    effort = "max"
    // Ignore failures?
    // ignoreFailures = false
    reports {
      xml {
        enabled = false
      }
      html {
        enabled = true
      }
    }
  }

  // disable spotbugsTests which checks our test code..
  spotbugsTest.enabled = false


  task lgtmCompile(type: JavaCompile, dependsOn: delombok) {
    group 'Build'
    description 'Compile for lgtm'

    source = sourceSets.main.extensions.delombokTask
    destinationDir = sourceSets.main.java.outputDir
    classpath = project.sourceSets.main.compileClasspath
  }


  check.dependsOn jacocoTestReport
  javadoc.dependsOn offlinePackageList, umlJavadoc

}
