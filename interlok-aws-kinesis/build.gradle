import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.*

ext {
  componentName='Interlok AWS/Kinesis'
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
  awsSDKVersion = '1.11.934'
}

// In this section you declare the dependencies for your production and test code
dependencies {
  compile ("com.amazonaws:aws-java-sdk-kinesis:$awsSDKVersion")
  compile ("com.amazonaws:amazon-kinesis-client:1.13.3") {
    exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
    exclude group: "com.google.protobuf", module: "protobuf-java"
  }
  compile ("commons-codec:commons-codec:1.15")
  // 0.13.0 doesn't contain the windows execuatble (bad?) so use the older version for now.
  // 0.13.1 does containthe windows binaries
  // 0.14 does not contain the windows binary.
  compile ("com.amazonaws:amazon-kinesis-producer:0.14.2") {
    exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
    exclude group: "com.google.protobuf", module: "protobuf-java"
  }
  compile ("com.google.protobuf:protobuf-java:3.14.0")
  compile ("com.fasterxml.jackson.core:jackson-databind:2.12.1")
  compile ("com.fasterxml.jackson.core:jackson-core:2.12.1")
  compile project(':interlok-aws-common')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
    classifier = 'examples'
    from new File(buildDir, '/examples')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.extensions.delombokTask
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
              "Build-Jdk": System.getProperty('java.version'),
              "Implementation-Title": componentName,
              "Implementation-Version": project.version,
              "Implementation-Vendor-Id": project.group,
              "Implementation-Vendor": organizationName)
  }
}

artifacts {
    archives javadocJar
    archives examplesJar
    archives sourcesJar
}

publishing {
  publications {
      mavenJava(MavenPublication) {
          from components.java

          artifact javadocJar { classifier "javadoc" }
          artifact examplesJar { classifier "examples" }
          artifact sourcesJar { classifier "sources" }
          pom.withXml {
            asNode().appendNode("name", componentName)
            asNode().appendNode("description", "Components that interact AWS Kinesis data streams")
            def properties = asNode().appendNode("properties")
            properties.appendNode("target", "3.9.1+")
            properties.appendNode("tags", "aws,kinesis")
            properties.appendNode("license", "false")
            properties.appendNode("readme", "https://github.com/adaptris/interlok-aws/raw/develop/README.md")
            properties.appendNode("repository", "https://github.com/adaptris/interlok-aws")
       }
      }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}


delombok {
  target = delombokTargetDir
}

task deleteGeneratedFiles(type: Delete) {
  delete file(testResourcesDir() + "/unit-tests.properties"), file(testResourcesDir() + "/unit-tests.properties.resolved"), delombokTargetDir
}

clean.dependsOn deleteGeneratedFiles
processTestResources.dependsOn copyUnitTestProperties
