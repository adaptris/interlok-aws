import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.*

ext {
  componentName = 'Interlok AWS/Kinesis'
  componentDesc = "Components that interact AWS Kinesis data streams"
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
  nettyVersion = "4.1.96.Final"
  kotlinVersion = "1.8.22"
  wireVersion = "4.8.0"
  awsSDKVersion = '1.12.528'
  jacksonVersion = '2.15.2'
}
dependencies {
  api (platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion"))
  api (platform("com.amazonaws:aws-java-sdk-bom:$awsSDKVersion"))
  implementation ("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion")

  api ("com.amazonaws:aws-java-sdk-kinesis")
  // The BOM from the parent overrides the 1.12.130 dependency on sdk-s3
  api ("com.amazonaws:amazon-kinesis-client:1.15.0") {
    exclude group: "com.google.protobuf", module: "protobuf-java"
  }

  api ("com.amazonaws:aws-java-sdk-core") {
    exclude group: "org.apache.avro"
  }
  api ("commons-codec:commons-codec:1.16.0")
  // 0.13.0 doesn't contain the windows execuatble (bad?) so use the older version for now.
  // 0.13.1 does containthe windows binaries
  // 0.14 does not contain the windows binary.
  api ("com.amazonaws:amazon-kinesis-producer:0.15.7") {
    exclude group: "com.google.protobuf", module: "protobuf-java"
    // Exclude netty so we can pin the version.
    exclude group: "io.netty"
    exclude group: "org.apache.avro"
    exclude group: "org.apache.kafka", module: "kafka-client"
  }
  implementation ("org.apache.avro:avro:1.11.2") {
    exclude group: "org.apache.commons", module: "commons-compress"
  }
  implementation ("org.apache.kafka:kafka-clients:3.5.1")
  
  implementation ("org.apache.commons:commons-compress:1.23.0")

  api ("com.google.guava:guava:32.1.2-jre")
  implementation (platform("io.netty:netty-bom:$nettyVersion"))

  implementation ("io.netty:netty-buffer")
  implementation ("io.netty:netty-common")
  implementation ("io.netty:netty-handler")
  implementation ("io.netty:netty-transport")
  implementation ("io.netty:netty-transport-native-epoll")
  implementation ("io.netty:netty-transport-native-unix-common")
  implementation ("io.netty:netty-transport-native-kqueue")
  implementation ("io.netty:netty-codec")
  implementation ("io.netty:netty-codec-http")

  implementation ("com.charleskorn.kaml:kaml:0.55.0")
  
  implementation ("com.squareup.wire:wire-schema:$wireVersion")
  implementation ("com.squareup.wire:wire-compiler:$wireVersion") {
    exclude group: "com.charleskorn.kaml", module: "kaml"
  }

  api ("com.google.protobuf:protobuf-java:3.24.1")
  // Dependency to platform/BOM
  api ("com.fasterxml.jackson.core:jackson-databind")
  api ("com.fasterxml.jackson.core:jackson-core")
  api ("com.fasterxml.jackson.core:jackson-annotations")
  api ("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor")
  api project(':interlok-aws-common')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
    classifier = 'examples'
    from new File(buildDir, '/examples')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.extensions.delombokTask
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
              "Build-Jdk": System.getProperty('java.version'),
              "Implementation-Title": componentName,
              "Implementation-Version": project.version,
              "Implementation-Vendor-Id": project.group,
              "Implementation-Vendor": organizationName)
  }
}

artifacts {
    archives javadocJar
    archives examplesJar
    archives sourcesJar
}

publishing {
  publications {
      mavenJava(MavenPublication) {
          from components.java

          artifact javadocJar { classifier "javadoc" }
          artifact examplesJar { classifier "examples" }
          artifact sourcesJar { classifier "sources" }
          pom.withXml {
            asNode().appendNode("name", componentName)
            asNode().appendNode("description", componentDesc)
			asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
            def properties = asNode().appendNode("properties")
            properties.appendNode("target", "3.9.1+")
            properties.appendNode("tags", "aws,kinesis")
            properties.appendNode("license", "false")
            properties.appendNode("readme", "https://github.com/adaptris/interlok-aws/raw/develop/README.md")
            properties.appendNode("repository", "https://github.com/adaptris/interlok-aws")
       }
      }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}


delombok {
  target = delombokTargetDir
}

task deleteGeneratedFiles(type: Delete) {
  delete file(testResourcesDir() + "/unit-tests.properties"), file(testResourcesDir() + "/unit-tests.properties.resolved"), delombokTargetDir
}

clean.dependsOn deleteGeneratedFiles
processTestResources.dependsOn copyUnitTestProperties
